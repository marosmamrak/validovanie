import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.Schema;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Validator;
import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

public class xsdValidator {


	//This should really come from the script or arg
	private final static String PROGRAM_NAME = "xsdv";
	// Would rather this was autogenerated
	private final static String VERSION = "1.1";

	private final static int VALIDATION_FAIL = 1;
	private final static int ERROR_READING_SCHEMA = 2;
	private final static int ERROR_READING_XML = 3;

	private static String mXSDFileName;
	private static String mXMLFileName;

	/**
	 * @param args
	 */
	public static void main(String[] args) {

		parseArgs(args);
		SchemaFactory factory = SchemaFactory.newInstance(
				"http://www.w3.org/2001/XMLSchema");

		File XMLFile = new File(mXMLFileName);

		try {
			URL url = testURL(mXSDFileName);


			try {
				Schema schema = factory.newSchema(url);
				Validator validator;
				validator = schema.newValidator();


				Source source = new StreamSource(XMLFile);


				try {
					validator.validate(source);
				}
				catch (SAXParseException ex) {
					System.exit(VALIDATION_FAIL);
				}
				catch (SAXException ex) {
					System.exit(VALIDATION_FAIL);
				}
				catch (IOException io) {
					System.exit(ERROR_READING_XML);
				}

			} catch (SAXException sch) {
				System.exit(ERROR_READING_SCHEMA);
			}
		} catch (MalformedURLException e) {
			System.exit(ERROR_READING_SCHEMA);
		}

	}

	/**
	 * Checks the string for having a protocol.
	 * If the string doesn't start with a protocol then it defaults to 'file:'
	 *
	 * @param url    the URL string
	 * @return        a URL
	 */
	private static URL testURL(final String url) throws MalformedURLException {
		try {
			return new URL(url);
		} catch (final MalformedURLException e) { }
		return new URL("file:" + url);
	}

	/**
	 * Checks and interprets the command line arguments.
	 *
	 * Code is based on Sun standard code for handling arguments.
	 *
	 * @param args    An array of the command line arguments
	 */
	private static void parseArgs(final String[] args) {

		int argNo = 0;
		String currentArg;
		char flag;

		while (argNo < args.length && args[argNo].startsWith("-")) {
			currentArg = args[argNo++];

			//"wordy" arguments

			if (currentArg.equals("--version")) {
				printVersionAndExit();
			} else if (currentArg.equals("--help")) {
				printHelpAndExit();
			} else {

				//(series of) flag arguments
				for (int charNo = 1; charNo < currentArg.length(); charNo++) {
					flag = currentArg.charAt(charNo);
					switch (flag) {
						case 'V':
							printVersionAndExit();
							break;
						case 'h':
							printHelpAndExit();
							break;

						default:
							printUsageAndExit();
							break;
					}
				}
			}
		}

		if ((argNo + 2) != args.length) {
			//Not given 2 files on input
			printUsageAndExit();
		}

		mXSDFileName = args[argNo];
		mXMLFileName = args[++argNo];
	}

	/**
	 * Outputs usage message to standard error.
	 */
	public static void printUsageAndExit() {

		System.exit(2); //2 indicates incorrect usage
	}

	public static void printHelpAndExit() {

		System.exit(0);
	}

	/**
	 * Outputs the current version of diffxml to standard out.
	 */
	public static void printVersionAndExit() {

		System.exit(0);
	}
}
